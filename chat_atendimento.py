import streamlit as st
import openai
import base64
from pathlib import Path

def show(navigate):
    # Configura√ß√£o da chave da API da OpenAI
    openai.api_key = "sk-rUSqK2zQX7STu1sWSPOq01zpo63VD8we9ooEc2SYAjT3BlbkFJVzrrxq_tfSn9jCL4Drh0eZuNpepNij5vD9si5gjBwA"

    def add_bg_from_local(image_file):
        """
        Adiciona uma imagem de fundo ao aplicativo Streamlit a partir de um arquivo local.
        Args:
        image_file (str): Caminho para o arquivo de imagem local.
        """
        with Path(image_file).open("rb") as file:
            encoded_string = base64.b64encode(file.read()).decode()
        st.markdown(
            f"""
            <style>
            .stApp {{
                background-image: url(data:image/png;base64,{encoded_string});
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )

    # Adicionando a imagem de fundo
    add_bg_from_local("C:/Users/TiagoVettorazzi/OneDrive - Grupo Portfolio/√Årea de Trabalho/Streamlit/Fundo_Health_Analyzer.png")

    # Estilos personalizados com CSS para cores e design do layout
    st.markdown("""
        <style>
        /* Ajustes para o layout */
        .reportview-container {
            width: 90%; 
            max-width: 1400px; 
            margin: auto; 
        }
        .main {
            background-color: #FFFFFF;
            padding: 5px;
        }
        /* Estilo do t√≠tulo */
        h1 {
            font-size: 36px;
            color: #0D47A1;
            margin-top: -50px;
        }
        /* Fundo da mensagem do usu√°rio */
        .st-chat-message-user {
            background-color: #DCEFFD;
            color: #333;
            padding: 10px;
            border-radius: 8px;
            text-align: left;
        }
        /* Fundo da mensagem do assistente */
        .st-chat-message-assistant {
            background-color: #21D498;
            color: #333;
            padding: 10px;
            border-radius: 8px;
            text-align: left;
        }
                
        # Bot√£o de voltar ao final da p√°gina
        .back-button {
            background-color: #007199;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            text-align: center;
            display: inline-block;
            cursor: pointer;
            font-size: 16px;
            text-decoration: none;
        }
        .back-button:hover {
            background-color: #005f73;
        }
        </style>
    """, unsafe_allow_html=True)

    # T√≠tulo da Aplica√ß√£o
    st.title("Health Analyzer")

    # Recuperar dados da p√°gina anterior
    idade = st.session_state.get("idade", "Informa√ß√£o n√£o registrada")
    nome = st.session_state.get("nome", "Informa√ß√£o n√£o registrada")
    queixas = st.session_state.get("queixas", "Nenhuma queixa registrada.")
    peso = st.session_state.get("peso", "informa√ß√£o n√£o registrada")
    altura = st.session_state.get("altura", "informa√ß√£o n√£o registrada")
    pressao_s = st.session_state.get("pressao_s", "informa√ß√£o n√£o registrada")
    pressao_d = st.session_state.get("pressao_d", "informa√ß√£o n√£o registrada")
    pressao_dif = st.session_state.get("pressao_dif", "informa√ß√£o n√£o registrada")
    temperatura = st.session_state.get("temperatura", "informa√ß√£o n√£o registrada")
    oxigenacao = st.session_state.get("oxigenacao", "informa√ß√£o n√£o registrada")
    comorbidade = st.session_state.get("comorbidade", "informa√ß√£o n√£o registrada")

    # Inicializar vari√°veis de estado da sess√£o
    if "openai_model" not in st.session_state:
        st.session_state["openai_model"] = "gpt-4"

    if "messages" not in st.session_state:
        st.session_state.messages = []

        prompt_inicial = (
            f"O paciente {nome} forneceu as seguintes informa√ß√µes durante a triagem: "
            f"Idade: {idade}, peso: {peso} kg, altura: {altura} m, temperatura corporal: {temperatura}¬∞C, n√≠vel de oxigena√ß√£o: {oxigenacao}%, "
            f"press√£o arterial sist√≥lica: {pressao_s} mmHg, press√£o arterial diast√≥lica: {pressao_d} mmHg, press√£o arterial diferencial: {pressao_dif} mmHg. "
            f"Comorbidades relatadas: {comorbidade}. "
            f"Al√©m disso, o paciente descreveu os seguintes sintomas: {queixas}. "
            "Com base nessas informa√ß√µes de triagem, siga estas instru√ß√µes:\n"
            "1. Analise o quadro com base nas informa√ß√µes fornecidas e determine o n√≠vel de gravidade, se considerado caso grave deixe isso/n"  
            "Explicito de forma enf√°tica no in√≠cio do texto e utilizando letras mai√∫sculas para destacar e diga de forma breve o motivo por qual o caso √© grave./n"
            "o paciente j√° ser√° atendido por um m√©dico, dessa forma n√£o fa√ßa recomenda√ß√µes. Utilize somente as informa√ß√µes que foram forncecidas, n√£o cite as que n√£o foram \n"
            "2. Apresente em um quadrante dividido em t√≥picos os sintomas relatados na triagem"
            "3. Diga de forma breve e geral a suspeita que paciente apresenta com base nas informa√ß√µes da triagem"
        )

        response = openai.ChatCompletion.create(
            model=st.session_state["openai_model"],
            messages=[{"role": "system", "content": prompt_inicial}],
            temperature=0.2,
            max_tokens=300,
            top_p=0.2,
            frequency_penalty=0.0,
            presence_penalty=0.0
        )
        # Adicionar a resposta inicial ao hist√≥rico
        st.session_state.messages.append({"role": "assistant", "content": response["choices"][0]["message"]["content"]})

    # Exibir mensagens anteriores do chat com avatares personalizados
    for message in st.session_state.messages:
        avatar = "üë§" if message["role"] == "user" else "ü©∫"
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"])
    
    if st.button("Voltar"):
        navigate("Info")


